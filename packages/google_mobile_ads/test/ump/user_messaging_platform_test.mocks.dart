// Mocks generated by Mockito 5.0.7 from annotations
// in google_mobile_ads/example/ios/.symlinks/plugins/google_mobile_ads/test/ump/user_messaging_platform_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:google_mobile_ads/src/ump/consent_form.dart' as _i7;
import 'package:google_mobile_ads/src/ump/consent_information.dart' as _i2;
import 'package:google_mobile_ads/src/ump/consent_request_parameters.dart'
    as _i5;
import 'package:google_mobile_ads/src/ump/user_messaging_channel.dart' as _i3;
import 'package:google_mobile_ads/src/ump/user_messaging_platform.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeConsentInformation extends _i1.Fake
    implements _i2.ConsentInformation {}

/// A class which mocks [UserMessagingChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserMessagingChannel extends _i1.Mock
    implements _i3.UserMessagingChannel {
  MockUserMessagingChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ConsentInformation> getConsentInformation() =>
      (super.noSuchMethod(Invocation.method(#getConsentInformation, []),
              returnValue: Future<_i2.ConsentInformation>.value(
                  _FakeConsentInformation()))
          as _i4.Future<_i2.ConsentInformation>);
  @override
  void requestConsentInfoUpdate(
          _i5.ConsentRequestParameters? params,
          _i2.OnConsentInfoUpdateSuccessListener? successListener,
          _i2.OnConsentInfoUpdateFailureListener? failureListener,
          _i2.ConsentInformation? consentInformation) =>
      super.noSuchMethod(
          Invocation.method(#requestConsentInfoUpdate,
              [params, successListener, failureListener, consentInformation]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<bool> isConsentFormAvailable(
          _i2.ConsentInformation? consentInfo) =>
      (super.noSuchMethod(
          Invocation.method(#isConsentFormAvailable, [consentInfo]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.ConsentStatus> getConsentStatus(
          _i2.ConsentInformation? consentInfo) =>
      (super.noSuchMethod(Invocation.method(#getConsentStatus, [consentInfo]),
          returnValue: Future<_i2.ConsentStatus>.value(
              _i2.ConsentStatus.notRequired)) as _i4.Future<_i2.ConsentStatus>);
  @override
  _i4.Future<void> reset(_i2.ConsentInformation? consentInfo) =>
      (super.noSuchMethod(Invocation.method(#reset, [consentInfo]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  void loadConsentForm(_i6.OnConsentFormLoadSuccessListener? successListener,
          _i6.OnConsentFormLoadFailureListener? failureListener) =>
      super.noSuchMethod(
          Invocation.method(
              #loadConsentForm, [successListener, failureListener]),
          returnValueForMissingStub: null);
  @override
  void show(_i7.ConsentForm? consentForm,
          _i7.OnConsentFormDismissedListener? onConsentFormDismissedListener) =>
      super.noSuchMethod(
          Invocation.method(
              #show, [consentForm, onConsentFormDismissedListener]),
          returnValueForMissingStub: null);
}
